name: Create a Release

on:
  push:
    branches:
    - master
  workflow_dispatch:
    inputs:
      release_type:
        description: SemVer segment to bump
        type: choice
        default: patch
        options:
        - patch
        - minor
        - major

defaults:
  run:
    shell: bash

permissions:
  contents: write

env:
  project-name: qBitrr
  GREN_GITHUB_TOKEN: ${{ secrets.PAT }}

jobs:
  prepare_release:
    name: Prepare release metadata
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.event.head_commit.message || '', '[patch]') ||
      startsWith(github.event.head_commit.message || '', '[minor]') ||
      startsWith(github.event.head_commit.message || '', '[major]')
    outputs:
      release_type: ${{ steps.release_type.outputs.value }}
      new_version: ${{ steps.version.outputs.value }}
      release_hash: ${{ steps.release_hash.outputs.value }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT }}
        ref: master

    - name: Determine release type
      id: release_type
      env:
        EVENT_NAME: ${{ github.event_name }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message || '' }}
        INPUT_RELEASE_TYPE: ${{ github.event.inputs.release_type || '' }}
      run: |
        if [[ "${EVENT_NAME}" == "workflow_dispatch" ]]; then
          type="${INPUT_RELEASE_TYPE:-patch}"
          echo "value=${type}" >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        case "${COMMIT_MESSAGE}" in
          "[patch]"*)
            type="patch"
            ;;
          "[minor]"*)
            type="minor"
            ;;
          "[major]"*)
            type="major"
            ;;
          *)
            echo "Commit message must begin with [patch], [minor], or [major]." >&2
            exit 1
            ;;
        esac

        echo "value=${type}" >> "${GITHUB_OUTPUT}"

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install release tooling
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools wheel
        python -m pip install bump2version build twine

    - name: Bump project version
      env:
        RELEASE_TYPE: ${{ steps.release_type.outputs.value }}
      run: |
        bump2version "${RELEASE_TYPE}"

    - name: Capture new version
      id: version
      run: |
        VERSION=$(python setup.py --version)
        echo "value=${VERSION}" >> "${GITHUB_OUTPUT}"
        echo "New version: ${VERSION}"

    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v6.3.0
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true

    - name: Commit version bump
      uses: stefanzweifel/git-auto-commit-action@v5.0.1
      with:
        commit_message: '[skip ci] Bump version to v${{ steps.version.outputs.value }}'
        tagging_message: v${{ steps.version.outputs.value }}
        commit_options: -S
        commit_user_name: ${{ steps.import_gpg.outputs.name }}
        commit_user_email: ${{ steps.import_gpg.outputs.email }}
        commit_author: ${{ steps.import_gpg.outputs.name }} <${{ steps.import_gpg.outputs.email }}>

    - name: Capture release hash
      id: release_hash
      run: |
        HASH=$(git rev-parse --short HEAD)
        echo "value=${HASH}" >> "${GITHUB_OUTPUT}"
        echo "Release hash: ${HASH}"

    - name: Update bundled git hash
      env:
        RELEASE_HASH: ${{ steps.release_hash.outputs.value }}
      run: |
        python - <<'PY'
        import os
        from pathlib import Path
        import re

        release_hash = os.environ["RELEASE_HASH"]
        path = Path("qBitrr/bundled_data.py")
        content = path.read_text()
        updated = re.sub(r'git_hash = ".*"', f'git_hash = "{release_hash}"', content)
        path.write_text(updated)
        PY

    - name: Commit bundled hash update
      uses: stefanzweifel/git-auto-commit-action@v5.0.1
      with:
        commit_message: '[skip ci] Update bundled git hash for v${{ steps.version.outputs.value }}'
        commit_options: -S
        commit_user_name: ${{ steps.import_gpg.outputs.name }}
        commit_user_email: ${{ steps.import_gpg.outputs.email }}
        commit_author: ${{ steps.import_gpg.outputs.name }} <${{ steps.import_gpg.outputs.email }}>

  create_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs:
    - prepare_release
    if: needs.prepare_release.result == 'success'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: master
        token: ${{ secrets.PAT }}

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.PAT }}
        tag_name: v${{ needs.prepare_release.outputs.new_version }}
        name: v${{ needs.prepare_release.outputs.new_version }}
        draft: false
        prerelease: false

  docker_images:
    name: Publish Docker images
    runs-on: ubuntu-latest
    needs:
    - prepare_release
    if: needs.prepare_release.result == 'success'
    env:
      VERSION: ${{ needs.prepare_release.outputs.new_version }}
    steps:
    - id: repo
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ github.repository }}

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: master

    - uses: docker/setup-qemu-action@v3

    - uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.REG_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          feramance/qbitrr
          ghcr.io/${{ steps.repo.outputs.lowercase }}
        tags: |
          type=raw,value=latest
          type=raw,value=nightly
          type=raw,value=v${{ env.VERSION }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  package_binaries:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    needs:
    - prepare_release
    - create_release
    if: needs.prepare_release.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        python:
        - 3.12.2
        os:
        - windows-latest
        - macOS-latest
        - ubuntu-latest
        arch:
        - x64
        - arm64
        exclude:
        - os: ubuntu-latest
          arch: arm64
        - os: macOS-latest
          arch: x64
        - os: windows-latest
          arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0

    - name: Install Homebrew dependencies
      if: runner.os == 'macOS'
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python }}
        architecture: ${{ matrix.arch }}

    - name: Install APT dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install libsdl2-dev

    - name: Set archive name
      id: archive
      env:
        RELEASE_HASH: ${{ needs.prepare_release.outputs.release_hash }}
      run: |
        ARCHIVE_NAME="${{ env.project-name }}-${RELEASE_HASH}-${{ matrix.os }}-${{ matrix.arch }}"
        echo "Archive name set to: ${ARCHIVE_NAME}"
        echo "NAME=${ARCHIVE_NAME}" >> "${GITHUB_OUTPUT}"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build web UI assets
      run: |
        cd webui
        npm ci
        npm run build

    - name: Copy web UI assets into package
      run: |
        if [ -d webui/dist ]; then
          rm -rf qBitrr/static/*
          mkdir -p qBitrr/static
          cp -a webui/dist/. qBitrr/static/
        else
          echo "webui/dist not found; assuming assets already built into qBitrr/static"
        fi

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        python -m pip install -U setuptools==69.5.1
        python -m pip install -U wheel
        python -m pip install -e '.[dev]'

    - name: Run PyInstaller
      env:
        PYTHONOPTIMIZE: 1
        PYTHONHASHSEED: 42
        PYTHONUNBUFFERED: 1
      run: |
        pyinstaller build.spec

    - name: List distribution files
      run: |
        find dist

    - name: Tar files
      if: runner.os != 'Windows'
      run: |
        tar --format=ustar -czvf ${{ steps.archive.outputs.NAME }}.tar.gz dist/

    - name: Archive files
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive dist/* ${{ steps.archive.outputs.NAME }}.zip

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: automated-build-${{ steps.archive.outputs.NAME }}
        path: ${{ steps.archive.outputs.NAME }}.*
        retention-days: 7
        if-no-files-found: error

    - name: Upload release assets
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.PAT }}
        file: ${{ steps.archive.outputs.NAME }}.*
        file_glob: true
        tag: v${{ needs.prepare_release.outputs.new_version }}
        overwrite: true

  publish_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs:
    - prepare_release
    - docker_images
    - package_binaries
    if: needs.prepare_release.result == 'success'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: master

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: python -m build

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  changelog:
    name: Generate changelog and release notes
    runs-on: ubuntu-latest
    needs:
    - prepare_release
    - create_release
    - publish_pypi
    - docker_images
    - package_binaries
    if: needs.prepare_release.result == 'success'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: master

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - uses: actions/setup-node@v4
      with:
        node-version: latest

    - name: Install release notes tooling
      run: npm install github-release-notes -g

    - name: Generate release notes and changelog
      run: |
        gren release
        gren changelog

    - name: Import GPG key
      id: changelog_gpg
      uses: crazy-max/ghaction-import-gpg@v6.3.0
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true

    - name: Commit changelog updates
      uses: stefanzweifel/git-auto-commit-action@v5.0.1
      with:
        commit_message: '[skip ci] Update changelog for v${{ needs.prepare_release.outputs.new_version }}'
        commit_options: -S
        commit_user_name: ${{ steps.changelog_gpg.outputs.name }}
        commit_user_email: ${{ steps.changelog_gpg.outputs.email }}
        commit_author: ${{ steps.changelog_gpg.outputs.name }} <${{ steps.changelog_gpg.outputs.email }}>
