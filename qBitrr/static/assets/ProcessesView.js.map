{"version":3,"file":"ProcessesView.js","sources":["../../../webui/src/components/ConfirmDialog.tsx","../../../webui/src/icons/build.svg","../../../webui/src/pages/ProcessesView.tsx"],"sourcesContent":["import type { JSX } from \"react\";\nimport { IconImage } from \"./IconImage\";\nimport CloseIcon from \"../icons/close.svg\";\n\ninterface ConfirmDialogProps {\n  title: string;\n  message: string;\n  confirmLabel?: string;\n  cancelLabel?: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  danger?: boolean;\n}\n\nexport function ConfirmDialog({\n  title,\n  message,\n  confirmLabel = \"Confirm\",\n  cancelLabel = \"Cancel\",\n  onConfirm,\n  onCancel,\n  danger = false,\n}: ConfirmDialogProps): JSX.Element {\n  return (\n    <div className=\"modal-backdrop\" onClick={onCancel}>\n      <div\n        className=\"modal\"\n        style={{ maxWidth: '500px' }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"modal-header\">\n          <h2>{title}</h2>\n          <button className=\"btn ghost\" onClick={onCancel}>\n            <IconImage src={CloseIcon} />\n          </button>\n        </div>\n        <div className=\"modal-body\">\n          <p style={{ margin: 0, lineHeight: 1.6 }}>{message}</p>\n        </div>\n        <div className=\"modal-footer\">\n          <button className=\"btn ghost\" onClick={onCancel}>\n            {cancelLabel}\n          </button>\n          <button\n            className={`btn ${danger ? 'danger' : 'primary'}`}\n            onClick={onConfirm}\n          >\n            {confirmLabel}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default \"__VITE_ASSET__DznMzWc1__\"","import { useCallback, useEffect, useMemo, useRef, useState, type JSX } from \"react\";\nimport {\n  getProcesses,\n  getStatus,\n  rebuildArrs,\n  restartAllProcesses,\n  restartProcess,\n} from \"../api/client\";\nimport type { ProcessInfo, StatusResponse } from \"../api/types\";\nimport { useToast } from \"../context/ToastContext\";\nimport { useInterval } from \"../hooks/useInterval\";\nimport { IconImage } from \"../components/IconImage\";\nimport { ConfirmDialog } from \"../components/ConfirmDialog\";\n\nimport RefreshIcon from \"../icons/refresh-arrow.svg\";\nimport RestartIcon from \"../icons/refresh-arrow.svg\";\nimport ToolsIcon from \"../icons/build.svg\";\n\nconst RELEASE_TOKEN_REGEX =\n  /\\b(480p|576p|720p|1080p|2160p|4k|8k|web[-_. ]?(?:dl|rip)|hdrip|hdtv|bluray|bd(?:rip)?|brrip|webrip|remux|x264|x265|hevc|dts|truehd|atmos|proper|repack|dvdrip|hdr|amzn|nf)\\b/i;\nconst EPISODE_TOKEN_REGEX = /\\bS\\d{1,3}E\\d{1,3}\\b/i;\nconst SEASON_TOKEN_REGEX = /\\bSeason\\s+\\d+\\b/i;\n\nfunction sanitizeSearchSummary(raw: string): string {\n  const trimmed = raw.trim();\n  if (!trimmed) return \"\";\n  if (/^\\d+\\s+queued item/i.test(trimmed)) return \"\";\n  const normalized = trimmed.replace(/\\s+/g, \" \");\n  const releaseMatch = normalized.match(\n    /^(?<title>.+?)\\s+(?<year>(?:19|20)\\d{2})(?:\\s+(?<rest>.*))?$/\n  );\n\n  if (releaseMatch) {\n    const rest = releaseMatch.groups?.rest ?? \"\";\n    const looksLikeEpisode =\n      EPISODE_TOKEN_REGEX.test(rest) || SEASON_TOKEN_REGEX.test(rest);\n    if (rest && !looksLikeEpisode && RELEASE_TOKEN_REGEX.test(rest)) {\n      const rawTitle = releaseMatch.groups?.title ?? \"\";\n      const cleanedTitle = rawTitle\n        .replace(/[-_.]/g, \" \")\n        .replace(/\\s{2,}/g, \" \")\n        .trim();\n      const year = releaseMatch.groups?.year ?? \"\";\n      if (cleanedTitle) {\n        return year ? `${cleanedTitle} (${year})` : cleanedTitle;\n      }\n    }\n  }\n\n  return normalized;\n}\n\nfunction isProcessEqual(a: ProcessInfo, b: ProcessInfo): boolean {\n  return (\n    a.category === b.category &&\n    a.name === b.name &&\n    a.kind === b.kind &&\n    a.pid === b.pid &&\n    a.alive === b.alive &&\n    (a.searchSummary ?? \"\") === (b.searchSummary ?? \"\") &&\n    (a.searchTimestamp ?? \"\") === (b.searchTimestamp ?? \"\") &&\n    (a.queueCount ?? null) === (b.queueCount ?? null) &&\n    (a.categoryCount ?? null) === (b.categoryCount ?? null) &&\n    (a.metricType ?? \"\") === (b.metricType ?? \"\")\n  );\n}\n\nfunction areProcessListsEqual(a: ProcessInfo[], b: ProcessInfo[]): boolean {\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let index = 0; index < a.length; index += 1) {\n    if (!isProcessEqual(a[index], b[index])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getRefreshDelay(active: boolean, processes: ProcessInfo[]): number | null {\n  if (!active) return null;\n  const hasActiveSearch = processes.some(\n    (proc) => proc.alive && proc.kind.toLowerCase() === \"search\"\n  );\n  if (hasActiveSearch) return 5000;\n  const hasQueueActivity = processes.some(\n    (proc) =>\n      typeof proc.queueCount === \"number\" && proc.queueCount > 0\n  );\n  if (hasQueueActivity) return 10000;\n  return 20000;\n}\n\ninterface ProcessesViewProps {\n  active: boolean;\n}\n\nexport function ProcessesView({ active }: ProcessesViewProps): JSX.Element {\n  const [processes, setProcesses] = useState<ProcessInfo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [restartingAll, setRestartingAll] = useState(false);\n  const [rebuildingArrs, setRebuildingArrs] = useState(false);\n  const [statusData, setStatusData] = useState<StatusResponse | null>(null);\n  const [confirmAction, setConfirmAction] = useState<{\n    title: string;\n    message: string;\n    onConfirm: () => void;\n  } | null>(null);\n  const { push } = useToast();\n  const isFetching = useRef(false);\n\n  const load = useCallback(async () => {\n    if (isFetching.current) {\n      return;\n    }\n    isFetching.current = true;\n    setLoading((prev) => (prev ? prev : true));\n    try {\n      const [processData, status] = await Promise.all([\n        getProcesses(),\n        getStatus(),\n      ]);\n      const next = (processData.processes ?? []).map((process) => {\n        if (typeof process.searchSummary === \"string\") {\n          const sanitized = sanitizeSearchSummary(process.searchSummary);\n          return {\n            ...process,\n            searchSummary: sanitized,\n          };\n        }\n        return process;\n      });\n      setProcesses((prev) =>\n        areProcessListsEqual(prev, next) ? prev : next\n      );\n      setStatusData(status);\n    } catch (error) {\n      push(\n        error instanceof Error\n          ? error.message\n          : \"Failed to load processes list\",\n        \"error\"\n      );\n    } finally {\n      isFetching.current = false;\n      setLoading(false);\n    }\n  }, [push]);\n\n  useEffect(() => {\n    void load();\n  }, [load]);\n\n  useEffect(() => {\n    if (active) {\n      void load();\n    }\n  }, [active, load]);\n\n  const refreshDelay = useMemo(\n    () => getRefreshDelay(active, processes),\n    [active, processes]\n  );\n\n  useInterval(() => {\n    void load();\n  }, refreshDelay);\n\n  const handleRestart = useCallback(\n    async (category: string, kind: string) => {\n      try {\n        await restartProcess(category, kind);\n        push(`Restarted ${category}:${kind}`, \"success\");\n        void load();\n      } catch (error) {\n        push(\n          error instanceof Error\n            ? error.message\n            : `Failed to restart ${category}:${kind}`,\n          \"error\"\n        );\n      }\n    },\n    [load, push]\n  );\n\n  const handleRestartAll = useCallback(async () => {\n    setConfirmAction({\n      title: \"Restart All Processes\",\n      message: \"Are you sure you want to restart all processes? This will temporarily interrupt all operations.\",\n      onConfirm: async () => {\n        setConfirmAction(null);\n        setRestartingAll(true);\n        try {\n          await restartAllProcesses();\n          push(\"Restarted all processes\", \"success\");\n          void load();\n        } catch (error) {\n          push(\n            error instanceof Error ? error.message : \"Failed to restart all\",\n            \"error\"\n          );\n        } finally {\n          setRestartingAll(false);\n        }\n      }\n    });\n  }, [load, push]);\n\n  const handleRebuildArrs = useCallback(async () => {\n    setConfirmAction({\n      title: \"Rebuild Arrs\",\n      message: \"Are you sure you want to rebuild all Arr instances? This will refresh all connections and may take some time.\",\n      onConfirm: async () => {\n        setConfirmAction(null);\n        setRebuildingArrs(true);\n        try {\n          await rebuildArrs();\n          push(\"Requested Arr rebuild\", \"success\");\n          void load();\n        } catch (error) {\n          push(\n            error instanceof Error ? error.message : \"Failed to rebuild Arrs\",\n            \"error\"\n          );\n        } finally {\n          setRebuildingArrs(false);\n        }\n      }\n    });\n  }, [load, push]);\n\n  const groupedProcesses = useMemo(() => {\n    interface Instance {\n      name: string;\n      items: ProcessInfo[];\n    }\n    interface AppGroup {\n      app: string;\n      instances: Instance[];\n    }\n    const appBuckets = new Map<string, Map<string, ProcessInfo[]>>();\n\n    const classifyApp = (proc: ProcessInfo): string => {\n      const category = (proc.category ?? \"\").toLowerCase();\n      const name = (proc.name ?? \"\").toLowerCase();\n      if (category.includes(\"radarr\") || name.includes(\"radarr\")) return \"Radarr\";\n      if (category.includes(\"sonarr\") || name.includes(\"sonarr\")) return \"Sonarr\";\n      if (category.includes(\"lidarr\") || name.includes(\"lidarr\")) return \"Lidarr\";\n      if (\n        category.includes(\"qbit\") ||\n        category.includes(\"qbittorrent\") ||\n        name.includes(\"qbit\") ||\n        name.includes(\"qbittorrent\")\n      ) {\n        return \"qBittorrent\";\n      }\n      return \"Other\";\n    };\n\n    // Check which Arr types are configured\n    const arrs = statusData?.arrs ?? [];\n    const hasRadarr = arrs.some((arr) => arr.type === \"radarr\");\n    const hasSonarr = arrs.some((arr) => arr.type === \"sonarr\");\n    const hasLidarr = arrs.some((arr) => arr.type === \"lidarr\");\n\n    processes.forEach((proc) => {\n      const app = classifyApp(proc);\n\n      // Skip Arr processes if that Arr type is not configured\n      if (app === \"Radarr\" && !hasRadarr) return;\n      if (app === \"Sonarr\" && !hasSonarr) return;\n      if (app === \"Lidarr\" && !hasLidarr) return;\n\n      if (!appBuckets.has(app)) appBuckets.set(app, new Map());\n      const instances = appBuckets.get(app)!;\n      const instanceKey =\n        proc.name || proc.category || `${proc.category}:${proc.kind}`;\n      if (!instances.has(instanceKey)) instances.set(instanceKey, []);\n      instances.get(instanceKey)!.push(proc);\n    });\n\n    const appOrder = [\"Radarr\", \"Sonarr\", \"Lidarr\", \"qBittorrent\", \"Other\"];\n\n    const result: AppGroup[] = Array.from(appBuckets.entries())\n      .map(([app, instances]) => {\n        const sortedInstances = Array.from(instances.entries())\n          .map(([name, items]) => ({\n            name,\n            items: items.sort((a, b) => a.kind.localeCompare(b.kind)),\n          }))\n          .sort((a, b) => a.name.localeCompare(b.name));\n        return { app, instances: sortedInstances };\n      })\n      .filter((group) => group.instances.length);\n\n    result.sort((a, b) => {\n      const order = (label: string) => {\n        const index = appOrder.indexOf(label);\n        return index === -1 ? Number.MAX_SAFE_INTEGER : index;\n      };\n      return order(a.app) - order(b.app) || a.app.localeCompare(b.app);\n    });\n\n    return result;\n  }, [processes, statusData]);\n\n  const handleRestartGroup = useCallback(\n    async (items: ProcessInfo[]) => {\n      try {\n        await Promise.all(\n          items.map((item) => restartProcess(item.category, item.kind))\n        );\n        push(`Restarted ${items[0]?.name ?? \"group\"}`, \"success\");\n        void load();\n      } catch (error) {\n        push(\n          error instanceof Error\n            ? error.message\n            : \"Failed to restart process group\",\n          \"error\"\n        );\n      }\n    },\n    [load, push]\n  );\n\n  const cardsByApp = groupedProcesses.map(({ app, instances }) => {\n        const cards = instances.map(({ name, items }) => {\n          const runningCount = items.filter((item) => item.alive).length;\n          const totalCount = items.length;\n          const tone =\n            totalCount === 0\n              ? \"\"\n              : runningCount === totalCount\n              ? \"status-indicator--ok\"\n              : runningCount === 0\n              ? \"status-indicator--bad\"\n              : \"\";\n          const statusClass = [\"status-indicator\"];\n          if (tone) statusClass.push(tone);\n          const statusLabel =\n            totalCount === 0\n              ? \"No processes\"\n              : runningCount === totalCount\n              ? \"All running\"\n              : runningCount === 0\n              ? \"Stopped\"\n              : `${runningCount}/${totalCount} running`;\n          const summaryLabel = totalCount === 1 ? \"1 process\" : `${totalCount} processes`;\n          const displayName = name === \"FreeSpaceManager\" ? \"Free Space Manager\" : name;\n          const uniqueKinds = Array.from(new Set(items.map((item) => item.kind)));\n          const filteredKinds = uniqueKinds.filter((kind) => {\n            const lower = kind.toLowerCase();\n            return lower !== \"search\" && lower !== \"torrent\";\n          });\n          const formatKind = (kind: string) =>\n            kind ? kind.charAt(0).toUpperCase() + kind.slice(1) : kind;\n\n          return (\n            <div className=\"process-card\" key={name}>\n              <div className=\"process-card__header\">\n                <div className=\"process-card__title\">\n                  <div className=\"process-card__name\">{displayName}</div>\n                  <div className=\"process-card__summary\">{summaryLabel}</div>\n                  {filteredKinds.length ? (\n                    <div className=\"process-card__badges\">\n                      {filteredKinds.map((kind) => (\n                        <span key={`${name}:${kind}:badge`} className=\"process-card__badge\">\n                          {formatKind(kind)}\n                        </span>\n                      ))}\n                    </div>\n                  ) : null}\n                </div>\n                <div className={statusClass.join(\" \")} title={statusLabel} />\n              </div>\n              <div className=\"process-card__list\">\n                {items.map((item) => (\n                  <div className=\"process-chip\" key={`${item.category}:${item.kind}`}>\n                    <div className=\"process-chip__top\">\n                      <div className=\"process-chip__name\">{formatKind(item.kind)}</div>\n                      <div className={`status-pill__dot ${item.alive ? \"text-success\" : \"text-danger\"}`} />\n                    </div>\n                    <div className=\"process-chip__detail\">\n                      {(() => {\n                        const kindLower = item.kind.toLowerCase();\n                        if (kindLower === \"search\") {\n                          const summary = item.searchSummary ?? \"\";\n                          return summary || \"No searches recorded\";\n                        }\n                        if (kindLower === \"torrent\") {\n                          const metricType = item.metricType?.toLowerCase();\n                          const categoryTotal =\n                            typeof item.categoryCount === \"number\" ? item.categoryCount : null;\n                          const queueTotal =\n                            typeof item.queueCount === \"number\" ? item.queueCount : null;\n\n                          if (!metricType) {\n                            const queueLabel = queueTotal !== null ? queueTotal : \"?\";\n                            const categoryLabel = categoryTotal !== null ? categoryTotal : \"?\";\n                            return `Torrents in queue ${queueLabel} / total ${categoryLabel}`;\n                          }\n\n                          if (metricType === \"category\" && categoryTotal !== null) {\n                            return `Torrent count ${categoryTotal}`;\n                          }\n\n                          if (metricType === \"free-space\" && queueTotal !== null) {\n                            return `Torrent count ${queueTotal}`;\n                          }\n\n                          return \"Torrent count unavailable\";\n                        }\n                        return \"\";\n                      })()}\n                    </div>\n                    <div className=\"process-chip__actions\">\n                      <button\n                        className=\"btn small\"\n                        onClick={() => handleRestart(item.category, item.kind)}\n                      >\n                        Restart\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"process-card__footer\">\n                <button\n                  className=\"btn small outline\"\n                  onClick={() => void handleRestartGroup(items)}\n                >\n                  Restart All\n                </button>\n              </div>\n            </div>\n          );\n        });\n        return { app, cards };\n      });\n\n  return (\n    <>\n      <section className=\"card\">\n        <div className=\"card-header\">Processes</div>\n        <div className=\"card-body stack\">\n          <div className=\"row\">\n            <div className=\"col inline\">\n              <button className=\"btn ghost\" onClick={() => void load()} disabled={loading}>\n                {loading && <span className=\"spinner\" />}\n                <IconImage src={RefreshIcon} />\n                {loading ? 'Refreshing...' : 'Refresh'}\n              </button>\n              <button className=\"btn\" onClick={() => void handleRestartAll()} disabled={restartingAll}>\n                {restartingAll && <span className=\"spinner\" />}\n                <IconImage src={RestartIcon} />\n                {restartingAll ? 'Restarting...' : 'Restart All'}\n              </button>\n              <button className=\"btn\" onClick={() => void handleRebuildArrs()} disabled={rebuildingArrs}>\n                {rebuildingArrs && <span className=\"spinner\" />}\n                <IconImage src={ToolsIcon} />\n                {rebuildingArrs ? 'Rebuilding...' : 'Rebuild Arrs'}\n              </button>\n            </div>\n          </div>\n          {cardsByApp.length ? (\n            cardsByApp.map(({ app, cards }) => (\n              <div className=\"process-section\" key={app}>\n                <div className=\"process-section__title\">{app}</div>\n                <div className=\"process-grid\">{cards}</div>\n              </div>\n            ))\n          ) : (\n            <div className=\"empty-state\">No processes available.</div>\n          )}\n        </div>\n      </section>\n      {confirmAction && (\n        <ConfirmDialog\n          title={confirmAction.title}\n          message={confirmAction.message}\n          confirmLabel=\"Confirm\"\n          cancelLabel=\"Cancel\"\n          danger={true}\n          onConfirm={confirmAction.onConfirm}\n          onCancel={() => setConfirmAction(null)}\n        />\n      )}\n    </>\n  );\n}\n"],"names":["ConfirmDialog","title","message","confirmLabel","cancelLabel","onConfirm","onCancel","danger","jsx","jsxs","e","IconImage","CloseIcon","ToolsIcon","RELEASE_TOKEN_REGEX","EPISODE_TOKEN_REGEX","SEASON_TOKEN_REGEX","sanitizeSearchSummary","raw","trimmed","normalized","releaseMatch","rest","looksLikeEpisode","cleanedTitle","year","isProcessEqual","b","areProcessListsEqual","index","getRefreshDelay","active","processes","proc","ProcessesView","setProcesses","useState","loading","setLoading","restartingAll","setRestartingAll","rebuildingArrs","setRebuildingArrs","statusData","setStatusData","confirmAction","setConfirmAction","push","useToast","isFetching","useRef","load","useCallback","prev","processData","status","getProcesses","getStatus","next","process","sanitized","error","useEffect","refreshDelay","useMemo","useInterval","handleRestart","category","kind","restartProcess","handleRestartAll","restartAllProcesses","handleRebuildArrs","rebuildArrs","groupedProcesses","appBuckets","classifyApp","name","arrs","hasRadarr","arr","hasSonarr","hasLidarr","app","instances","instanceKey","appOrder","result","sortedInstances","items","a","group","order","label","handleRestartGroup","item","cardsByApp","cards","runningCount","totalCount","tone","statusClass","statusLabel","summaryLabel","displayName","filteredKinds","lower","formatKind","kindLower","metricType","categoryTotal","queueTotal","Fragment","RefreshIcon","RestartIcon"],"mappings":"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"}